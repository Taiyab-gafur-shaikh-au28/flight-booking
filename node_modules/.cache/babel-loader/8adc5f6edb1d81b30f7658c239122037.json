{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultFilterBy;\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\nvar _some = _interopRequireDefault(require(\"lodash/some\"));\nvar _stripDiacritics = _interopRequireDefault(require(\"./stripDiacritics\"));\nvar _warn = _interopRequireDefault(require(\"./warn\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n  if (props.ignoreDiacritics) {\n    searchStr = (0, _stripDiacritics[\"default\"])(searchStr);\n    str = (0, _stripDiacritics[\"default\"])(str);\n  }\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\nfunction defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n    labelKey = props.labelKey,\n    multiple = props.multiple,\n    selected = props.selected,\n    text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return (0, _isEqual[\"default\"])(o, option);\n  })) {\n    return false;\n  }\n  var fields = filterBy.slice();\n  if ((0, _isFunction[\"default\"])(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n  if ((0, _isString[\"default\"])(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n  if ((0, _isString[\"default\"])(option)) {\n    (0, _warn[\"default\"])(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n  return (0, _some[\"default\"])(fields, function (field) {\n    var value = option[field];\n    if (!(0, _isString[\"default\"])(value)) {\n      (0, _warn[\"default\"])(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.'); // Coerce to string since `toString` isn't null-safe.\n\n      value = \"\".concat(value);\n    }\n    return isMatch(text, value, props);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}