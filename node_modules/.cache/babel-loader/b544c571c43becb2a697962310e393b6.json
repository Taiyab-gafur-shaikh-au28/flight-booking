{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _getMatchBounds = _interopRequireDefault(require(\"./getMatchBounds\"));\nvar _getOptionLabel = _interopRequireDefault(require(\"./getOptionLabel\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction getHintText(_ref) {\n  var activeItem = _ref.activeItem,\n    initialItem = _ref.initialItem,\n    isFocused = _ref.isFocused,\n    isMenuShown = _ref.isMenuShown,\n    labelKey = _ref.labelKey,\n    multiple = _ref.multiple,\n    selected = _ref.selected,\n    text = _ref.text;\n\n  // Don't display a hint under the following conditions:\n  if (\n  // No text entered.\n  !text ||\n  // The input is not focused.\n  !isFocused ||\n  // The menu is hidden.\n  !isMenuShown ||\n  // No item in the menu.\n  !initialItem ||\n  // The initial item is a custom option.\n  initialItem.customOption ||\n  // One of the menu items is active.\n  activeItem ||\n  // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n  var initialItemStr = (0, _getOptionLabel[\"default\"])(initialItem, labelKey);\n  var bounds = (0, _getMatchBounds[\"default\"])(initialItemStr.toLowerCase(), text.toLowerCase());\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\nvar _default = getHintText;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}