{"ast":null,"code":"import { put, takeLatest, all } from 'redux-saga/effects';\nimport { findPaths } from './../lib/flightManager';\nimport { transformFlightDates } from './../lib/utils';\nfunction* fetchFlights() {\n  try {\n    const json = yield fetch('https://my-json-server.typicode.com/mneema/mock-db/flights').then(response => response.json());\n    yield put({\n      type: \"GET_FLIGHTS_SUCCESS\",\n      json: transformFlightDates(json)\n    });\n  } catch (e) {\n    console.log('error', e);\n    yield put({\n      type: \"GET_FLIGHTS_FAIL\",\n      error: e\n    });\n  }\n}\nfunction* findFlights(payload) {\n  try {\n    yield put({\n      type: \"GET_FILTERS_SUCCESS\",\n      json: payload.payload.criteria\n    });\n    const _payload$payload = payload.payload,\n      flights = _payload$payload.flights,\n      _payload$payload$crit = _payload$payload.criteria,\n      returnDate = _payload$payload$crit.returnDate,\n      origin = _payload$payload$crit.origin,\n      destination = _payload$payload$crit.destination,\n      departureDate = _payload$payload$crit.departureDate,\n      numOfPassengers = _payload$payload$crit.numOfPassengers;\n    const listOfFlights = {};\n    if (returnDate) {\n      listOfFlights.return = findPaths({\n        flights,\n        criteria: {\n          origin: destination,\n          destination: origin,\n          date: returnDate,\n          numOfPassengers\n        }\n      });\n    }\n    listOfFlights.onwards = findPaths({\n      flights,\n      criteria: {\n        origin,\n        destination,\n        date: departureDate,\n        numOfPassengers\n      }\n    });\n    yield put({\n      type: \"GET_ROUTES_SUCCESS\",\n      json: listOfFlights\n    });\n  } catch (e) {\n    console.log('error', e);\n    yield put({\n      type: \"GET_ROUTES_FAIL\",\n      error: e\n    });\n  }\n}\nfunction* flightsWatcher() {\n  yield takeLatest('GET_FLIGHTS', fetchFlights);\n}\nfunction* findFlightsWatcher() {\n  yield takeLatest('GET_ROUTES', findFlights);\n}\nexport default function* rootSaga() {\n  yield all([flightsWatcher(), findFlightsWatcher()]);\n}","map":{"version":3,"names":["put","takeLatest","all","findPaths","transformFlightDates","fetchFlights","json","fetch","then","response","type","e","console","log","error","findFlights","payload","criteria","flights","returnDate","origin","destination","departureDate","numOfPassengers","listOfFlights","return","date","onwards","flightsWatcher","findFlightsWatcher","rootSaga"],"sources":["C:/Users/ADMIN/Desktop/Flight Searcher/React-flight-booking/src/sagas/index.js"],"sourcesContent":["import { put, takeLatest, all } from 'redux-saga/effects';\r\nimport { findPaths } from './../lib/flightManager';\r\nimport { transformFlightDates } from './../lib/utils';\r\n\r\nfunction* fetchFlights() {\r\n  try {\r\n    const json = yield fetch('https://my-json-server.typicode.com/mneema/mock-db/flights')\r\n      .then(response => response.json());\r\n    yield put({ type: \"GET_FLIGHTS_SUCCESS\", json: transformFlightDates(json) });\r\n  } catch (e) {\r\n    console.log('error', e);\r\n    yield put({ type: \"GET_FLIGHTS_FAIL\", error: e });\r\n  }\r\n\r\n}\r\n\r\nfunction* findFlights(payload) {\r\n  try {\r\n    yield put({ type: \"GET_FILTERS_SUCCESS\", json: payload.payload.criteria });\r\n    \r\n    const { flights, criteria: { returnDate, origin, destination, departureDate, numOfPassengers } } = payload.payload;\r\n    const listOfFlights = {};\r\n    \r\n    if (returnDate) {\r\n      listOfFlights.return = findPaths({ flights, criteria: { origin: destination, destination: origin, date: returnDate, numOfPassengers } })\r\n    }\r\n\r\n    listOfFlights.onwards = findPaths({ flights, criteria: { origin, destination, date: departureDate, numOfPassengers } });\r\n    \r\n    yield put({ type: \"GET_ROUTES_SUCCESS\", json: listOfFlights });\r\n  } catch (e) {\r\n    console.log('error', e);\r\n    yield put({ type: \"GET_ROUTES_FAIL\", error: e });\r\n  }\r\n\r\n}\r\n\r\nfunction* flightsWatcher() {\r\n  yield takeLatest('GET_FLIGHTS', fetchFlights)\r\n}\r\n\r\nfunction* findFlightsWatcher() {\r\n  yield takeLatest('GET_ROUTES', findFlights)\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    flightsWatcher(),\r\n    findFlightsWatcher()\r\n  ]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,EAAEC,GAAG,QAAQ,oBAAoB;AACzD,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,oBAAoB,QAAQ,gBAAgB;AAErD,UAAUC,YAAY,GAAG;EACvB,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,4DAA4D,CAAC,CACnFC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACH,IAAI,EAAE,CAAC;IACpC,MAAMN,GAAG,CAAC;MAAEU,IAAI,EAAE,qBAAqB;MAAEJ,IAAI,EAAEF,oBAAoB,CAACE,IAAI;IAAE,CAAC,CAAC;EAC9E,CAAC,CAAC,OAAOK,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,CAAC,CAAC;IACvB,MAAMX,GAAG,CAAC;MAAEU,IAAI,EAAE,kBAAkB;MAAEI,KAAK,EAAEH;IAAE,CAAC,CAAC;EACnD;AAEF;AAEA,UAAUI,WAAW,CAACC,OAAO,EAAE;EAC7B,IAAI;IACF,MAAMhB,GAAG,CAAC;MAAEU,IAAI,EAAE,qBAAqB;MAAEJ,IAAI,EAAEU,OAAO,CAACA,OAAO,CAACC;IAAS,CAAC,CAAC;IAAC,yBAEwBD,OAAO,CAACA,OAAO;MAA1GE,OAAO,oBAAPA,OAAO;MAAA,yCAAED,QAAQ;MAAIE,UAAU,yBAAVA,UAAU;MAAEC,MAAM,yBAANA,MAAM;MAAEC,WAAW,yBAAXA,WAAW;MAAEC,aAAa,yBAAbA,aAAa;MAAEC,eAAe,yBAAfA,eAAe;IAC5F,MAAMC,aAAa,GAAG,CAAC,CAAC;IAExB,IAAIL,UAAU,EAAE;MACdK,aAAa,CAACC,MAAM,GAAGtB,SAAS,CAAC;QAAEe,OAAO;QAAED,QAAQ,EAAE;UAAEG,MAAM,EAAEC,WAAW;UAAEA,WAAW,EAAED,MAAM;UAAEM,IAAI,EAAEP,UAAU;UAAEI;QAAgB;MAAE,CAAC,CAAC;IAC1I;IAEAC,aAAa,CAACG,OAAO,GAAGxB,SAAS,CAAC;MAAEe,OAAO;MAAED,QAAQ,EAAE;QAAEG,MAAM;QAAEC,WAAW;QAAEK,IAAI,EAAEJ,aAAa;QAAEC;MAAgB;IAAE,CAAC,CAAC;IAEvH,MAAMvB,GAAG,CAAC;MAAEU,IAAI,EAAE,oBAAoB;MAAEJ,IAAI,EAAEkB;IAAc,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOb,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,CAAC,CAAC;IACvB,MAAMX,GAAG,CAAC;MAAEU,IAAI,EAAE,iBAAiB;MAAEI,KAAK,EAAEH;IAAE,CAAC,CAAC;EAClD;AAEF;AAEA,UAAUiB,cAAc,GAAG;EACzB,MAAM3B,UAAU,CAAC,aAAa,EAAEI,YAAY,CAAC;AAC/C;AAEA,UAAUwB,kBAAkB,GAAG;EAC7B,MAAM5B,UAAU,CAAC,YAAY,EAAEc,WAAW,CAAC;AAC7C;AAEA,eAAe,UAAUe,QAAQ,GAAG;EAClC,MAAM5B,GAAG,CAAC,CACR0B,cAAc,EAAE,EAChBC,kBAAkB,EAAE,CACrB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}